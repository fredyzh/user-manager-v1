// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0--rc2
// source: api/token/v1/service/service.proto

package service

import (
	context "context"
	pb "github.com/fredyzh/user_manager/api/token/v1/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenServiceClient interface {
	// Token
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenReply, error)
	VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*pb.Code, error)
	TokenHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TokenHealthReply, error)
	RegisterJWTSecret(ctx context.Context, in *RegisterJWTSecretRequest, opts ...grpc.CallOption) (*RegisterJWTSecretReply, error)
	IssueJWTToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*IssueTokenReply, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenReply, error)
}

type tokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenServiceClient(cc grpc.ClientConnInterface) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenReply, error) {
	out := new(ValidateTokenReply)
	err := c.cc.Invoke(ctx, "/token.v1.service.TokenService/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*pb.Code, error) {
	out := new(pb.Code)
	err := c.cc.Invoke(ctx, "/token.v1.service.TokenService/VerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) TokenHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TokenHealthReply, error) {
	out := new(TokenHealthReply)
	err := c.cc.Invoke(ctx, "/token.v1.service.TokenService/TokenHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) RegisterJWTSecret(ctx context.Context, in *RegisterJWTSecretRequest, opts ...grpc.CallOption) (*RegisterJWTSecretReply, error) {
	out := new(RegisterJWTSecretReply)
	err := c.cc.Invoke(ctx, "/token.v1.service.TokenService/RegisterJWTSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) IssueJWTToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*IssueTokenReply, error) {
	out := new(IssueTokenReply)
	err := c.cc.Invoke(ctx, "/token.v1.service.TokenService/IssueJWTToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenReply, error) {
	out := new(RefreshTokenReply)
	err := c.cc.Invoke(ctx, "/token.v1.service.TokenService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServiceServer is the server API for TokenService service.
// All implementations must embed UnimplementedTokenServiceServer
// for forward compatibility
type TokenServiceServer interface {
	// Token
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenReply, error)
	VerifyCode(context.Context, *VerifyCodeRequest) (*pb.Code, error)
	TokenHealth(context.Context, *emptypb.Empty) (*TokenHealthReply, error)
	RegisterJWTSecret(context.Context, *RegisterJWTSecretRequest) (*RegisterJWTSecretReply, error)
	IssueJWTToken(context.Context, *IssueTokenRequest) (*IssueTokenReply, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenReply, error)
	mustEmbedUnimplementedTokenServiceServer()
}

// UnimplementedTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenServiceServer struct {
}

func (UnimplementedTokenServiceServer) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedTokenServiceServer) VerifyCode(context.Context, *VerifyCodeRequest) (*pb.Code, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCode not implemented")
}
func (UnimplementedTokenServiceServer) TokenHealth(context.Context, *emptypb.Empty) (*TokenHealthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenHealth not implemented")
}
func (UnimplementedTokenServiceServer) RegisterJWTSecret(context.Context, *RegisterJWTSecretRequest) (*RegisterJWTSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterJWTSecret not implemented")
}
func (UnimplementedTokenServiceServer) IssueJWTToken(context.Context, *IssueTokenRequest) (*IssueTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueJWTToken not implemented")
}
func (UnimplementedTokenServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedTokenServiceServer) mustEmbedUnimplementedTokenServiceServer() {}

// UnsafeTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServiceServer will
// result in compilation errors.
type UnsafeTokenServiceServer interface {
	mustEmbedUnimplementedTokenServiceServer()
}

func RegisterTokenServiceServer(s grpc.ServiceRegistrar, srv TokenServiceServer) {
	s.RegisterService(&TokenService_ServiceDesc, srv)
}

func _TokenService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.v1.service.TokenService/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_VerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).VerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.v1.service.TokenService/VerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).VerifyCode(ctx, req.(*VerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_TokenHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).TokenHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.v1.service.TokenService/TokenHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).TokenHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_RegisterJWTSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterJWTSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).RegisterJWTSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.v1.service.TokenService/RegisterJWTSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).RegisterJWTSecret(ctx, req.(*RegisterJWTSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_IssueJWTToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).IssueJWTToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.v1.service.TokenService/IssueJWTToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).IssueJWTToken(ctx, req.(*IssueTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.v1.service.TokenService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenService_ServiceDesc is the grpc.ServiceDesc for TokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "token.v1.service.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateToken",
			Handler:    _TokenService_ValidateToken_Handler,
		},
		{
			MethodName: "VerifyCode",
			Handler:    _TokenService_VerifyCode_Handler,
		},
		{
			MethodName: "TokenHealth",
			Handler:    _TokenService_TokenHealth_Handler,
		},
		{
			MethodName: "RegisterJWTSecret",
			Handler:    _TokenService_RegisterJWTSecret_Handler,
		},
		{
			MethodName: "IssueJWTToken",
			Handler:    _TokenService_IssueJWTToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _TokenService_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/token/v1/service/service.proto",
}
